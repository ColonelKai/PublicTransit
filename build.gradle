import java.awt.Desktop
import java.nio.file.Files

plugins {
    id "java-library"
    id 'jacoco'
}

group = "org.colonelkai"

if(hasProperty("version") && !getProperty("version").toString().isBlank() && getProperty("version").toString() != "unspecified"){
    var foundVersion = getProperty("version")
    version = foundVersion
}else{
    var headPath = file(".git/HEAD").toPath()
    var currentBranch = Files
            .lines(headPath)
            .findAny()
            .map(path -> path.substring(5))
            .orElseThrow(() -> new RuntimeException("Project was not cloned. No .git folder. Please use git to clone the repo"))
    var branchPath = file(".git/" + currentBranch).toPath();
    var longHash = Files
            .lines(branchPath)
            .findAny()
            .orElseThrow(() -> new RuntimeException("Branch file could not be found of '" + currentBranch + "'"))
    var builder = new StringBuilder();
    builder.append("Hash-")
    builder.append(longHash.substring(0, 7))
    builder.append("-Branch-")
    builder.append(currentBranch.substring(11))
    version = builder.toString()
}


apply from: "buildGradle/buildCommon.gradle"
apply from: "buildGradle/buildBukkit.gradle"
apply from: "buildGradle/clearsetup.gradle"

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation project(":TranslateCore")
    implementation group: 'org.jetbrains', name: 'annotations', version: '24.0.1'
    implementation group: 'com.github.mosemister', name: 'EasyConfig', version: 'master-SNAPSHOT'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
    testRuntimeOnly group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.5.0'
}

javadoc {
    options {
        links('https://minecraft-ships.github.io/TranslateCore/')
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    scanForTestClasses = false
    include("**/*Tests.class")
}

jacocoTestReport {
    dependsOn test
    doLast {
        var showCodeCoverage = Boolean.parseBoolean(getProperty("showCodeCoverage"));
        if (!showCodeCoverage) {
            println("> Skipping showing code coverage: disabled in properties")
            return
        }
        if (!Desktop.isDesktopSupported()) {
            return
        }
        if (!Desktop.desktop.isSupported(Desktop.Action.BROWSE)) {
            return
        }
        Desktop.desktop.browse(file("build/reports/jacoco/test/html/index.html").toURI())
    }
}