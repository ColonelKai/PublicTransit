import java.nio.charset.StandardCharsets
import java.util.function.Consumer
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

ext.download = { String repoName ->
    var relative = file(repoName)
    if (relative.exists()) {
        println(" > Skipping download: " + repoName)
        return
    }

    byte[] buffer = new byte[2048];
    String download = "https://github.com/Minecraft-Ships/" + repoName + "/archive/refs/heads/master.zip"
    var downloadUrl = new URL(download).openStream()

    var zip = new ZipInputStream(downloadUrl)

    ZipEntry entry;

    while ((entry = zip.getNextEntry()) != null) {
        if (entry.isDirectory()) {
            continue
        }
        var name = entry.getName().substring((repoName + "-master").length() + 1)
        var file = file(repoName + "/" + name)
        file.parentFile.mkdirs()
        file.createNewFile()

        FileOutputStream fos = new FileOutputStream(file)
        int length
        while ((length = zip.read(buffer)) > 0) {
            fos.write(buffer, 0, length)
        }
        fos.close()
    }

    zip.close()
}

ext.downloadAll = { ->
    download("TranslateCore")
    download("CoreToFolia")
}

ext.combined = { String translator, String translatorName, String exportPath, Consumer<ZipOutputStream> extra ->
    var jarFilter = new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith(".jar")
        }
    }

    var translatorJar = ((File) file(translator + "/build/libs")).listFiles(jarFilter)[0]
    var translatorApiJar = ((File) file("TranslateCore/build/libs")).listFiles(jarFilter)[0]
    var pluginJar = (File) file("build/libs/" + rootProject.name + "-" + version + ".jar")
    if (!pluginJar.exists()) {
        pluginJar = file("build/libs/" + rootProject.name + "-" + version + "/" + rootProject.name + ".jar")
    }

    var exportFile = file(exportPath)

    exportFile.parentFile.mkdirs()
    exportFile.createNewFile()

    var output = new FileOutputStream(exportFile)
    var zip = new ZipOutputStream(output)
    byte[] bytes = new byte[1024];

    var zipFiles = new File[]{translatorJar, translatorApiJar, pluginJar}
    var entered = new ArrayList<String>();
    for (File zipPath : zipFiles) {
        var zipFile = new ZipFile(zipPath)
        zipFile.stream().forEach((ZipEntry entry) -> {
            var name = entry.getName()
            if (name.contains("plugin.yml")) {
                return
            }
            if (entered.contains(name)) {
                if (!entry.isDirectory()) {
                    println(" > Found duplicate: " + name);
                }
                return
            }
            var newEntry = new ZipEntry(name)
            zip.putNextEntry(newEntry)
            entered.add(name)


            var is = zipFile.getInputStream(entry)
            int length;
            while ((length = is.read(bytes)) >= 0) {
                zip.write(bytes, 0, length);
            }
            is.close()
            zip.closeEntry()
        })
        zipFile.close()
    }
    extra.accept(zip)

    var entry = new ZipEntry("META-INF/translate-core.properties")
    zip.putNextEntry(entry)

    var stringBuilder = new StringBuilder();
    stringBuilder.append("stand-alone=org.colonelkai.publictransit.PublicTransit")
    var byteIS = new ByteArrayInputStream(stringBuilder.toString().getBytes(StandardCharsets.UTF_8))

    int length;
    while ((length = byteIS.read(bytes)) >= 0) {
        zip.write(bytes, 0, length)
    }
    byteIS.close()
    zip.closeEntry()

    zip.close()
}

tasks.register("setup") {
    group = "Translate Core"
    description = "Setup Translate Core"
    doLast {
        downloadAll()
    }
}